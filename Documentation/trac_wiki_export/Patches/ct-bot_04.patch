Index: Changelog.txt
===================================================================
RCS file: /ctbot/ct-Bot/Changelog.txt,v
retrieving revision 1.91
diff -u -r1.91 Changelog.txt
--- Changelog.txt	14 Jul 2006 16:12:37 -0000	1.91
+++ Changelog.txt	17 Jul 2006 17:23:25 -0000
@@ -1,5 +1,20 @@
 CHANGELOG fuer c't-Bot
 ======================
+2006-07-16	Peter Jonas (peter.jonas@gmx.de) & Achim Pankalla (achim.pankalla@gmx.de)
+			(Peter Jonas)
+			Kalibrierung der Distanzsensoren über EEPROM-Tabelle entwickelt.
+			(Achim Pankalla)
+			Kleine Optimierungen und Fehlerbehebung. Anpassung des Kodes an die 
+			Koderichtlinien. Anpassung an neue Parameter Funktionen und Aenderungen 
+			am Kode damit die Kalibrierung auch im ct-Sim funktioniert. 
+			Vorraussetzung dafuer das der Ct-Sim Sensorwerte liefert, wie zum Beispiel mit
+			ct-sim Patch 7.
+			
+2006-06-30	Achim Pankalla (achim.pankalla@gmx.de)
+			Einfuehrung zweier Funktionen zum schreiben und lesen des EEPROM des ct-bot. 
+			Damit wurde der Hardwarezugriff abstahiert und ein EEPROM ist nun auch beim
+			simulierten Bot vorhanden. Das EEPROM wird durch eine Datei repraesentiert.
+			
 2006-07-11  Benjamin Benz (bbe@heise.de) Sensor-correction grob an ct-sim angepasst
 
 2006-07-11  Frank Menzel(menzelfr@gmx.de) Korrekturen bzgl. Logausgabe
Index: command.c
===================================================================
RCS file: /ctbot/ct-Bot/command.c,v
retrieving revision 1.14
diff -u -r1.14 command.c
--- command.c	8 Jul 2006 02:36:15 -0000	1.14
+++ command.c	17 Jul 2006 17:23:26 -0000
@@ -43,6 +43,8 @@
 #include "bot-logik.h"
 #include "bot-2-pc.h"
 
+#include "sensor-low.h"
+
 #include <stdio.h>
 #include <string.h>
 
@@ -51,6 +53,10 @@
 	#include <pthread.h>	
 #endif
 
+#ifdef SENSOR_TABLE_AVAILABLE
+	#include "sensor_correction.h"
+#endif
+
 #define COMMAND_TIMEOUT 	10		/*!< Anzahl an ms, die maximal auf fehlende Daten gewartet wird */
 
 #ifdef COMMAND_AVAILABLE
@@ -63,6 +69,9 @@
 	// Auf dword alignment bestehen, wird fuer MacOS X benoetigt
 	pthread_mutex_t     command_mutex __attribute__ ((aligned (4)))
 		= PTHREAD_MUTEX_INITIALIZER;
+	// Wird fuer die weitergabe der simulierten Analogwerte der Abstandssenoren benötigt
+	extern uint16 simadcL;
+	extern uint16 simadcR;
 #endif
 
 /*!
@@ -303,7 +312,7 @@
 		// Einige Kommandos ergeben nur fuer simulierte Bots Sinn
 		#ifdef PC
 			case CMD_SENS_IR:
-				sensor_abstand(received_command.data_l,received_command.data_r);
+				sensor_abstand(simadcL = received_command.data_l,simadcR = received_command.data_r);
 				
 				#ifdef TIME_AVAILABLE
 					system_time_isr();		/* Einmal pro Update-Zyklus aktualisieren wir die Systemzeit */
Index: ct-Bot.c
===================================================================
RCS file: /ctbot/ct-Bot/ct-Bot.c,v
retrieving revision 1.32
diff -u -r1.32 ct-Bot.c
--- ct-Bot.c	8 Jul 2006 02:36:15 -0000	1.32
+++ ct-Bot.c	17 Jul 2006 17:23:27 -0000
@@ -40,12 +40,16 @@
 	#include <pthread.h>
 	#include <unistd.h>
 	#include <stdlib.h>
-#endif
+#endif 
 
 #ifdef TWI_AVAILABLE
 	#include "TWI_driver.h"
 #endif
 
+#ifdef CALIBRATE_DIST_SENSOR
+	#include "sensor-low.h"
+#endif
+
 #include <string.h>
 #include <stdio.h>
 
@@ -469,6 +473,10 @@
 		#endif	
 	#endif
 	
+	#ifdef CALIBRATE_DIST_SENSOR
+		calibrate_distsensor(); 
+	#endif
+
 	#ifdef TEST_AVAILABLE_COUNTER
 		display_screen=2;
 
Index: ct-Bot.h
===================================================================
RCS file: /ctbot/ct-Bot/ct-Bot.h,v
retrieving revision 1.27
diff -u -r1.27 ct-Bot.h
--- ct-Bot.h	8 Jul 2006 02:36:15 -0000	1.27
+++ ct-Bot.h	17 Jul 2006 17:23:27 -0000
@@ -64,10 +64,13 @@
 #define ENA_AVAILABLE		/*!< Enable-Leitungen */
 #define SHIFT_AVAILABLE		/*!< Shift Register */
 
+#define SENSOR_TABLE_AVAILABLE 	/*!< EEPROM-Tabelle verwenden, um die Sensoren zu kalibrieren */
+
 //#define TEST_AVAILABLE_ANALOG	/*!< Sollen die LEDs die analoge Sensorwerte anzeigen */
 #define TEST_AVAILABLE_DIGITAL	/*!< Sollen die LEDs die digitale Sensorwerte anzeigen */
 //#define TEST_AVAILABLE_MOTOR	/*!< Sollen die Motoren ein wenig drehen */
 //#define TEST_AVAILABLE_COUNTER /*!< Gibt einen Endlos-Counter auf Screen 3 aus und aktiviert Screen 3 */
+#define CALIBRATE_DIST_SENSOR  	/*!< Aktivieren des Kalibrierungsprogramm fuer die Erstellung der SENSOR_TABLE*/
 //#define DOXYGEN		/*!< Nur zum Erzeugen der Doku, wenn dieser schalter an ist, jammert der gcc!!! */
 
 #define BEHAVIOUR_AVAILABLE /*!< Nur wenn dieser Parameter gesetzt ist, exisitiert das Verhaltenssystem */
@@ -96,6 +99,10 @@
 
 #ifndef IR_AVAILABLE
 	#undef RC5_AVAILABLE
+#endif
+
+#ifndef RC5_AVAILABLE
+	#undef CALIBRATE_DIST_SENSOR
 #endif
 
 #ifdef PC
Index: rc5.c
===================================================================
RCS file: /ctbot/ct-Bot/rc5.c,v
retrieving revision 1.25
diff -u -r1.25 rc5.c
--- rc5.c	11 Jul 2006 08:44:42 -0000	1.25
+++ rc5.c	17 Jul 2006 17:23:28 -0000
@@ -29,6 +29,7 @@
 #include "ir-rc5.h"
 #include "motor.h"
 #include "motor-low.h"
+#include "sensor-low.h"
 #include "bot-logik.h"
 #include "display.h"
 
@@ -390,6 +391,16 @@
 				}
 				break;
 		#endif
+	#ifdef CALIBRATE_DIST_SENSOR
+		case 3:
+			switch (par->value1) {
+				case 0: calibrate_is_finish(0); break;
+				case 1: calibrate_chng_dist((uint16)1); break;
+				case 2: calibrate_act_value(); break;
+				case 3: calibrate_chng_dist((uint16)3); break;
+			}
+			break;
+	#endif
 		default:
 	#endif
 			switch (par->value1) {
Index: sensor.c
===================================================================
RCS file: /ctbot/ct-Bot/sensor.c,v
retrieving revision 1.16
diff -u -r1.16 sensor.c
--- sensor.c	10 Jul 2006 08:20:45 -0000	1.16
+++ sensor.c	17 Jul 2006 17:23:29 -0000
@@ -96,6 +96,7 @@
  * @param left Linker Rohwert [0-1023]
  * @param right Rechter Rohwert [0-1023]
  */
+#ifndef SENSOR_TABLE_AVAILABLE
 void sensor_abstand(uint16 left, uint16 right){
 	sensDistL = SENSDISTSLOPELEFT / (left - SENSDISTOFFSETLEFT);
 	sensDistR = SENSDISTSLOPERIGHT / (right - SENSDISTOFFSETRIGHT);
@@ -108,6 +109,50 @@
 		sensDistR=SENS_IR_INFINITE;
 	
 }
+#endif
+
+#ifdef SENSOR_TABLE_AVAILABLE
+/*! 
+ * Funktion benutzt die Kalibrierungstabelle im EEPROM dazu die Werte der Abstandssensoren
+ * zu stabilisieren.
+ */
+void sensor_abstand(uint16 left, uint16 right){
+	uint8 i; //Laufvariablen fuer Werteindizierung
+
+	//Grenzwerte behandeln	
+	if (left > load_parameter(0, 2)) {
+		sensDistL = DISTANCE_START*10;
+		return;
+	}
+	if (left < load_parameter(DISTANCE_STEPS*2, 2)) {
+		sensDistL = DISTANCE_START + DISTANCE_STEP * (DISTANCE_STEPS + 1);
+		return;
+	}
+	if (right > load_parameter((DISTANCE_STEPS + 1)*2, 2)) {
+		sensDistR = DISTANCE_START*10;
+		return;
+	}
+	if (right < load_parameter(DISTANCE_STEPS*2 + (DISTANCE_STEPS + 1)*2, 2)) {
+		sensDistR = DISTANCE_START + DISTANCE_STEP * (DISTANCE_STEPS + 1);
+		return;
+	}
+
+	//Wert fuer links aus Kalibrierdaten bestimmen	
+	for(i=0; left < load_parameter(i*2,2); i++ ); //Realwert suchen
+	sensDistL = (i * DISTANCE_STEP + DISTANCE_START) * 10; //in mm umrechnen
+	//Ergebnis verfeinern
+	if(left > (load_parameter(i*2, 2) + load_parameter((i-1)*2, 2)) / 2)
+		sensDistL -= (DISTANCE_STEP * 10) / 2;
+
+	//Wert fuer rechts aus Kalibrierdaten bestimmen	
+	for(i=0; right < load_parameter(i*2 + (DISTANCE_STEPS + 1)*2, 2); i++ ); //Realwert suchen
+	sensDistR = (i * DISTANCE_STEP + DISTANCE_START) * 10; //in mm umrechnen
+	//Ergebnis verfeinern
+	if(right > (load_parameter(i*2 + (DISTANCE_STEPS + 1)*2, 2) + load_parameter((i-1)*2 + (DISTANCE_STEPS + 1)*2, 2)) / 2)
+		sensDistR -= (DISTANCE_STEP * 10) / 2;
+	return;
+}
+#endif
 
 /*! Sensor_update
 * Kuemmert sich um die Weiterverarbeitung der rohen Sensordaten 
Index: include/sensor-low.h
===================================================================
RCS file: /ctbot/ct-Bot/include/sensor-low.h,v
retrieving revision 1.2
diff -u -r1.2 sensor-low.h
--- include/sensor-low.h	3 Feb 2006 10:54:42 -0000	1.2
+++ include/sensor-low.h	17 Jul 2006 17:23:29 -0000
@@ -35,6 +35,34 @@
  */
 extern void bot_sens_isr(void);
 
+#ifdef CALIBRATE_DIST_SENSOR
+
+/*! 
+ * Erstellt das Menue des Kalibrierungsprogramm auf dem Display und fragt die 
+ * Fernbedienung ab.
+ */ 
+extern void calibrate_distsensor(void);
+
+/*! 
+ * Zeigt das Ende des Kalibriervorgangs an und setzt Abbruchwert der Hauptschleife.
+  * @param mode Mode ist 1 bei vollstaendiger Kalibrierung und 0 bei Abbruch.
+ */ 
+extern void calibrate_is_finish(uint8 mode);
+
+/*! 
+ * Aendert die Distanzwert abhaengig von par und zeigt den neuen Wert auf den Display an.
+ * @param par Bei par=3 wird die Distanz um 5 erhoeht bei par=1 wird sie um 5 cm vermindert.
+ */ 
+extern void calibrate_chng_dist(uint16 par);
+/*! 
+ * Kalibriert die Abstandssensoren ueber einen Mittelwert von einer bestimmten Anzahl von
+ * Messungen und schreibt den aktuellen Wert in eine Tabelle ins EEPROM. 
+ * Waehrend der Messung werden die aktuellen Werte angezeigt, danach der gemittelte Wert.
+ */ 
+extern void calibrate_act_value(void);
+#endif
+
+
 /*!
  * Kuemmert sich um die Radencoder
  * Das muss schneller gehen als die anderen Sensoren,
Index: include/sensor_correction.h
===================================================================
RCS file: /ctbot/ct-Bot/include/sensor_correction.h,v
retrieving revision 1.4
diff -u -r1.4 sensor_correction.h
--- include/sensor_correction.h	14 Jul 2006 16:12:37 -0000	1.4
+++ include/sensor_correction.h	17 Jul 2006 17:23:29 -0000
@@ -35,5 +35,21 @@
 #define SENS_IR_MAX_DIST	800		/*!< Obergrenze des Erfassungsbereichs */
 #define SENS_IR_INFINITE	999		/*!< Kennzeichnung fuer "kein Objekt im Erfassungsbereich" */
 
+#ifdef CALIBRATE_DIST_SENSOR
+	#include "delay.h"
+	#include "display.h"
+	#include "rc5.h"
+	#include "parameter-low.h"
+	#define SAMPLES_PER_AVG    50		/*!< Anzahl der Messungen pro Abstand, die in die Mittelwertbildung eingehen */
+	#define DISTANCE_START      8       /*!< Startdistanz der Kalibrierung */
+	#define DISTANCE_STEP	    4		/*!< Abstand der einzelnen Messwerte*/ 
+	#define DISTANCE_STEPS     20       /*!< Anzahl der weitere Werte, ausser dem Startwert*/
+#endif
+#ifdef SENSOR_TABLE_AVAILABLE
+	#define DISTANCE_START      8       /*!< Startdistanz der Kalibrierung */
+	#define DISTANCE_STEP	    4		/*!< Granularitaet der Messungen in cm [5 bedeutet: Messung bei 5,10, 15 .. cm */
+	#define DISTANCE_STEPS     20       /*!< Anzahl der weitere Werte, ausser dem Startwert*/
+	extern uint16 simDistL, simDistR;   /*!< Sichert die Analogen Werte der Abstandssensoren des ct-Sim*/
+#endif
 
 #endif /*SENSOR_CORRECTION_H_*/
Index: calibrate_dist_sensors.c
===================================================================
RCS file: calibrate_dist_sensors.c
diff -N calibrate_dist_sensors.c
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ calibrate_dist_sensors.c	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,155 @@
+/*
+ * c't-Sim - Robotersimulator fuer den c't-Bot
+ * 
+ * This program is free software; you can redistribute it
+ * and/or modify it under the terms of the GNU General
+ * Public License as published by the Free Software
+ * Foundation; either version 2 of the License, or (at your
+ * option) any later version. 
+ * This program is distributed in the hope that it will be 
+ * useful, but WITHOUT ANY WARRANTY; without even the implied
+ * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
+ * PURPOSE. See the GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public 
+ * License along with this program; if not, write to the Free 
+ * Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307, USA.
+ * 
+ */
+
+/*! @file 	calibrate_dist_sensors.c  
+ * @brief 	Routinen zur Kalibrierung der IR Abstandssensoren des c't-Bots
+ * @author 	Peter Jonas (peter.jonas@gmx.de) und Achim Pankalla (achim.pankalla@gmx.de)
+ * @date 	26.06.06
+*/
+
+#include "ct-Bot.h"
+
+#include <stdio.h>
+#include "sensor.h"
+#include "sensor_correction.h"
+#ifdef MCU
+	#include "adc.h"
+#endif
+
+#ifdef PC
+	uint16 simadcL = 0; //Speicher fuer die Analogwerte vom Ct-Sim
+	uint16 simadcR = 0;
+#endif
+
+#ifdef CALIBRATE_DIST_SENSOR
+
+static uint8 actual_dist=DISTANCE_START; /*!Nur in dieser Datei bekannte globale Variable*/
+
+
+/*! 
+ * Erstellt das Menue des Kalibrierungsprogramm auf dem Display und fragt die 
+ * Fernbedienung ab.
+ */  
+
+void calibrate_distsensor(void) {
+	display_screen=3;    //Start Bildschirm erstellen   
+	display_clear();
+	delay(200); //Sonst fehlt Teil der Ausgabe auf Bot
+ 	display_cursor(1,1);
+	display_printf("Sensorkalibrierung");
+	display_cursor(2,1);
+	display_printf("Setze Abstand: %2dcm", DISTANCE_START);	
+	display_cursor(3,1);
+	display_printf("EWert L=---- R=----");
+	display_cursor(4,1);
+	display_printf("<1 Mess=2 Ende=0 3>");
+ 
+ 	do {                // Wiederhole den Vorgang bis er beendet oder abgebrochen wird.
+ 		delay(200);     // Bisschen einbremsen, damit PC nicht so eingebremst wird.
+		rc5_control();	// Abfrage der IR-Fernbedienung
+ 	}
+	while(actual_dist);
+
+	actual_dist = DISTANCE_START; //Alles auf Ursprungswerte setzen
+	display_screen = 0;
+ 		
+	return;
+}
+
+
+/*! 
+ * Zeigt das Ende des Kalibriervorgangs an und setzt Abbruchwert der Hauptschleife.
+ * @param mode Mode ist 1 bei vollstaendiger Kalibrierung und 0 bei Abbruch.
+ */  
+
+void calibrate_is_finish(uint8 mode) {
+	display_cursor(2,1);
+	if(mode){
+		display_printf("Messreihe komplett  ");
+	}
+	else {
+		display_printf("Messreihe beendet   ");
+	}		
+	actual_dist = 0;
+	delay(5000);
+	return;
+}
+/*! 
+ * Aendert die Distanzwert abhaengig von par und zeigt den neuen Wert auf den Display an.
+ * @param par Bei par=3 wird die Distanz um 5 erhoeht bei par=1 wird sie um 5 cm vermindert.
+ */  
+
+void calibrate_chng_dist(uint16 par) {
+	switch(par) { //Distanzwert par Abhaengig veraendern.
+		case 1:
+			if (actual_dist > DISTANCE_START)
+       			actual_dist -= DISTANCE_STEP; 
+       		break;
+       	case 3:
+			if (actual_dist == DISTANCE_START + DISTANCE_STEPS * DISTANCE_STEP) {
+				calibrate_is_finish(1);
+				return;
+			}
+			if (actual_dist < DISTANCE_START + DISTANCE_STEPS * DISTANCE_STEP)
+       			actual_dist += DISTANCE_STEP; 
+       		break;
+	}
+	display_cursor(2,1); //Ausgabe aktualisieren
+	display_printf("Setze Abstand: %2dcm",actual_dist);	
+	return;
+}
+
+/*! 
+ * Kalibriert die Abstandssensoren ueber einen Mittelwert von einer bestimmten Anzahl von
+ * Messungen und schreibt den aktuellen Wert in eine Tabelle ins EEPROM. 
+ * Waehrend der Messung werden die aktuellen Werte angezeigt, danach der gemittelte Wert.
+ */  
+
+void calibrate_act_value(void) {
+	uint16 tmp_DistL,tmp_DistR, i;
+	uint16 act_DistL, act_DistR; //Aktuelle Messwerte
+	
+	for (i=0,tmp_DistL=0,tmp_DistR=0;i<SAMPLES_PER_AVG;i++) {	//Den Mittelwert aus einer Anzahl von Werten bilden
+#ifdef MCU
+ 		act_DistL = adc_read(0);//Analogwerte vom Ct-Bot
+		act_DistR = adc_read(1);
+#endif
+#ifdef PC
+		act_DistL = simadcL; //Analogwerte vom Ct-Sim
+		act_DistR = simadcR;
+#endif
+		display_cursor(3,1);
+		display_printf("MWert L=%4d, R=%4d",act_DistL, act_DistR);	// Einzelmessung anzeigen
+		tmp_DistL += act_DistL;
+		tmp_DistR += act_DistR;
+		delay(100);
+	}
+	tmp_DistL=tmp_DistL/SAMPLES_PER_AVG;// Mittelwert berechnen, evt. hier besseren Algorithmus verwenden
+	tmp_DistR=tmp_DistR/SAMPLES_PER_AVG;
+
+	display_cursor(3,1);
+	display_printf("EWert L=%4d, R=%4d",tmp_DistL, tmp_DistR);	// Mittelwert anzeigen
+	
+	store_parameter(((actual_dist-DISTANCE_START)/DISTANCE_STEP) * 2, tmp_DistL, 2);
+	store_parameter(((actual_dist-DISTANCE_START)/DISTANCE_STEP) * 2 + (DISTANCE_STEPS + 1)*2, tmp_DistR, 2);
+ 
+	calibrate_chng_dist(3); //Naechsten Distanzwert einstellen
+	return;
+}
+#endif
Index: Documentation/parameter-low.html
===================================================================
RCS file: Documentation/parameter-low.html
diff -N Documentation/parameter-low.html
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ Documentation/parameter-low.html	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,98 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
+<HTML>
+<HEAD>
+	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=windows-1252">
+	<TITLE></TITLE>
+	<META NAME="GENERATOR" CONTENT="OpenOffice.org 2.0  (Win32)">
+	<META NAME="AUTHOR" CONTENT="Achim Pankalla">
+	<META NAME="CREATED" CONTENT="20060528;19455600">
+	<META NAME="CHANGEDBY" CONTENT="Achim Pankalla">
+	<META NAME="CHANGED" CONTENT="20060628;10512043">
+	<STYLE>
+	<!--
+		@page { size: 21cm 29.7cm; margin: 2cm }
+		P { margin-bottom: 0.21cm }
+	-->
+	</STYLE>
+</HEAD>
+<BODY LANG="de-DE" DIR="LTR">
+<P ALIGN=CENTER STYLE="margin-bottom: 0cm"><B>Parameterspeicherung</B></P>
+<P STYLE="margin-bottom: 0cm"><BR>
+</P>
+<P STYLE="margin-bottom: 0cm"><FONT SIZE=3><B>Author: </B></FONT>
+</P>
+<P STYLE="margin-bottom: 0cm"><FONT SIZE=3>Achim Pankalla
+(achim.pankalla@gmx.de)</FONT></P>
+<P STYLE="margin-bottom: 0cm"><BR>
+</P>
+<P STYLE="margin-bottom: 0cm"><B>Beschreibung:</B></P>
+<P STYLE="margin-bottom: 0cm; font-style: normal">Die Funktionen der
+Parameterspeicherung wurden von mir erstellt, um den Zugriff auf die
+Hardware des Prozessors zu abstrahieren. 
+</P>
+<P STYLE="margin-bottom: 0cm; font-style: normal">Parameter sind nach
+dieser Definition Daten, die man auch nach dem Abschalten des ct-bots
+noch benoetigt. Natuerlich legt man solche Daten im EEPROM des
+Prozessors ab und da setzen die Funktionen an. Sie sorgen dafuer das
+diese Moeglichkeit auch im Simulator zur Verfuegung steht. Der
+Programmierer kann damit sowohl im Ct-Sim als auch im realen ct-bot
+mit den selben Aufrufen seine Daten sichern.</P>
+<P STYLE="margin-bottom: 0cm; font-style: normal">Damit auch der
+Austausch dieser Daten einfach von statten gehen kann, werden die
+EEPROM Daten beim ct-sim in eine BIN-Datei abgelegt. Diese kann mit
+den gaengigen Programmiersoftware auf den Prozessor uebertragen
+werden. Andererseits koennen vom Prozessor abgezogenen Datei auch
+EEPROM fuer den ct-sim benutzt werden, wenn sie im BIN Format von der
+Programmiersoftware gesichert werden..</P>
+<P STYLE="margin-bottom: 0cm; font-style: normal"><BR>
+</P>
+<P STYLE="margin-bottom: 0cm; font-style: normal"><B>EEPROM-Datei
+fuer Simulation:</B></P>
+<P STYLE="margin-bottom: 0cm; font-style: normal">Die Datei, die das
+simulierte EEPROM darstellt, wird in <I>parameter-low_pc.c</I> mit
+dem DEFINE  EEPROM_FILENAME festgelegt. Bei der Vergabe des Namens,
+ist zu folgendes zu beachten:</P>
+<P STYLE="margin-bottom: 0cm"><I>Pfad</I></P>
+<P STYLE="margin-bottom: 0cm; font-style: normal">Der Pfad, der den
+eigentlichen Dateinamen vorangestellt werden kann, muss existieren.
+Es werden von den Funktionen keine neuen Verzeichnisse angelegt.
+Stimmt die Pfadangabe nicht, so werden keine Daten abgelegt. Ist die
+Datei selbst nicht vorhanden, so wird eine Neue angelegt.</P>
+<P STYLE="margin-bottom: 0cm"><I>Backslash</I></P>
+<P STYLE="margin-bottom: 0cm; font-style: normal">Das \ in der
+Pfadangabe muss immer gedoppelt werden (\\), da der Compiler das
+Backslash als Einleitung fuer ein Sonderzeichen sieht. 
+</P>
+<P STYLE="margin-bottom: 0cm; font-style: normal">Suffix</P>
+<P STYLE="margin-bottom: 0cm; font-style: normal">Die Datei muss
+nicht unbedingt mit <I>.bin</I> enden. Dies erleichtert jedoch die
+Arbeit, wenn zum Beispiel PonyProg schon als Standartprogramm fuer
+diesen Dateityp eingestellt ist.</P>
+<P STYLE="margin-bottom: 0cm; font-style: normal"><BR>
+</P>
+<P STYLE="margin-bottom: 0cm; font-style: normal">Existiert keine
+Datei mit den angegebenen Namen, so wird beim Schreibzugriff eine
+solche angelegt. Beim Lesen von Daten, wird bei einer nicht
+existenten Datei Null zurueckgegeben.</P>
+<P STYLE="margin-bottom: 0cm; font-style: normal"><BR>
+</P>
+<P STYLE="margin-bottom: 0cm"><B>Funktionen:</B></P>
+<P STYLE="margin-bottom: 0cm">store_parameter() 	- Speichern von
+Informationen im EEPROM</P>
+<P STYLE="margin-bottom: 0cm">load_parameter()	- Laden von
+Informationen aus dem EEPROM</P>
+<P STYLE="margin-bottom: 0cm"><BR>
+</P>
+<P STYLE="margin-bottom: 0cm"><FONT SIZE=3><B>Dateien:</B></FONT></P>
+<P STYLE="margin-bottom: 0cm"><FONT SIZE=3>parameter-low.h	Include
+Dateinamen mit Funktionsparameter</FONT></P>
+<P STYLE="margin-bottom: 0cm"><FONT SIZE=3>parameter-low.c	Funktionen
+fuer den ct-bot</FONT></P>
+<P STYLE="margin-bottom: 0cm"><FONT SIZE=3>parameter-low_pc.c	Funktionen
+fuer den ct-Sim</FONT></P>
+<P STYLE="margin-bottom: 0cm"><BR>
+</P>
+<P STYLE="margin-bottom: 0cm; font-style: normal"><BR>
+</P>
+</BODY>
+</HTML>
Index: Documentation/sensor_eprom_doc.htm
===================================================================
RCS file: Documentation/sensor_eprom_doc.htm
diff -N Documentation/sensor_eprom_doc.htm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ Documentation/sensor_eprom_doc.htm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,160 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
+<HTML>
+<HEAD>
+	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=windows-1252">
+	<TITLE></TITLE>
+	<META NAME="GENERATOR" CONTENT="OpenOffice.org 2.0  (Win32)">
+	<META NAME="CREATED" CONTENT="20060508;19143406">
+	<META NAME="CHANGEDBY" CONTENT="Achim Pankalla">
+	<META NAME="CHANGED" CONTENT="20060715;19003631">
+	<STYLE>
+	<!--
+		@page { size: 21cm 29.7cm }
+		H2.western { font-family: "Albany", sans-serif; font-size: 14pt; font-style: italic }
+		H2.cjk { font-family: "HG Mincho Light J"; font-size: 14pt; font-style: italic }
+		H2.ctl { font-family: "Arial Unicode MS"; font-size: 14pt; font-style: italic }
+	-->
+	</STYLE>
+</HEAD>
+<BODY LANG="de-DE" DIR="LTR">
+<H2 CLASS="western">Sensorkalibrierung mittels EEPROM-Tabelle</H2>
+<P STYLE="margin-bottom: 0cm">Version 0.4 (28-Jun-2006)<BR><BR>Peter
+Jonas (peter.jonas@gmx.de) 
+</P>
+<P STYLE="margin-bottom: 0cm">Achim Pankalla (achim.pankalla@gmx.de)</P>
+<HR>
+<P ALIGN=CENTER><U><B>Einleitung</B></U></P>
+<P ALIGN=LEFT>Mit diesem Patch kann mittels einer EEPROM-Tabelle die
+Kalibrierung der Distanzsensoren durchgefuehrt werden. Dies gilt auch
+fuer den ct-Sim. <BR><BR><BR>
+</P>
+<P ALIGN=CENTER><U><B>Einstellungen im Quellkode</B></U></P>
+<P ALIGN=LEFT>Die Kalibrierung wird ueber mehrere <I>#defines</I> in
+der Datei <I>ctbot.h</I> und <I>sensor_correction.h</I> gesteuert: 
+</P>
+<P ALIGN=CENTER><BR><FONT COLOR="#ff0000">#define
+CALIBRATE_DIST_SENSOR</FONT></P>
+<P ALIGN=LEFT>Wenn diese Zeile aktiviert ist, geht der Roboter in den
+Kalibrierungsmodus. Diese Einstellung ist nur einmal notwendig, um
+die Kalibrierung der Sensoren durchzufuehren. Im spaeteren normalen
+Roboterbetrieb ist diese Zeile zu deaktivieren. 
+</P>
+<P ALIGN=CENTER><BR><FONT COLOR="#ff0000">#define
+<FONT FACE="Times New Roman, serif">SENSOR_TABLE_AVAILABLE</FONT></FONT><BR><BR><BR>
+</P>
+<P ALIGN=LEFT>Wenn diese Zeile aktiviert ist, wird im normalen
+Roboterbetrieb eine im EEPROM abgelegte Tabelle fuer die
+Linearisierung der Distanzsensoren benutzt. Wenn diese Zeile
+deaktiviert ist, wird die urspruengliche Linearisierung der Sensoren
+ueber die einfache Hyperbelfunktion durchgefuehrt. 
+</P>
+<P ALIGN=CENTER STYLE="margin-bottom: 0cm"><FONT COLOR="#ff0000"><FONT FACE="Times New Roman, serif"><FONT SIZE=3><B>#define</B>
+SAMPLES_PER_AVG</FONT></FONT></FONT></P>
+<P ALIGN=LEFT STYLE="margin-bottom: 0cm"><BR>
+</P>
+<P ALIGN=LEFT STYLE="margin-bottom: 0cm"><FONT COLOR="#000000"><FONT FACE="Times New Roman, serif"><FONT SIZE=3>Anzahl
+der Messungen pro Abstand, die zur Mittelwertberechung genutzt
+werden.</FONT></FONT></FONT></P>
+<P ALIGN=CENTER STYLE="margin-bottom: 0cm"><FONT COLOR="#ff0000"><FONT FACE="Times New Roman, serif"><FONT SIZE=3><B>#define</B>
+DISTANCE_START</FONT></FONT></FONT></P>
+<P ALIGN=CENTER STYLE="margin-bottom: 0cm"><BR>
+</P>
+<P ALIGN=LEFT STYLE="margin-bottom: 0cm"><FONT COLOR="#000000"><FONT FACE="Times New Roman, serif"><FONT SIZE=3>Abstand
+in Zentimeter, bei dem die Messreihe beginnt. Dieser Wert muss dort
+liegen, wo die Sensoren ihre hoechsten Werte liefern und dann den Bot
+noch ein kleines Stuck weiter. Acht Zentimeter hat sich als guter
+Wert erwiesen. </FONT></FONT></FONT>
+</P>
+<P ALIGN=CENTER STYLE="margin-bottom: 0cm"><FONT COLOR="#ff0000"><FONT FACE="Times New Roman, serif"><FONT SIZE=3><B>#define</B>
+DISTANCE_STEP</FONT></FONT></FONT></P>
+<P ALIGN=CENTER STYLE="margin-bottom: 0cm"><BR>
+</P>
+<P ALIGN=LEFT STYLE="margin-bottom: 0cm"><FONT COLOR="#000000"><FONT FACE="Times New Roman, serif"><FONT SIZE=3>Abstand
+zwischen den Messpunkten. Mit der aktuellen Auswertungsfunktion wird
+dieser Wert halbiert und man erhaelt so die Genauigkeit der
+ermittelten Werte. Bei mir hat sich der Wert 5 als gut erwiesen. Der
+Bot kann dann auf 25mm die Werte aufl&ouml;sen und diese sind auch
+sehr stabil. Der Wert entspricht natuerlich Zentimeter. Man sollte
+aber auf eine Gesamtdistanz von mindestens 80cm kommen. Notfalls den
+folgenden Wert erhoehen.</FONT></FONT></FONT></P>
+<P ALIGN=CENTER STYLE="margin-bottom: 0cm"><FONT COLOR="#ff0000"><FONT FACE="Times New Roman, serif"><FONT SIZE=3><B>#define</B>
+DISTANCE_STEPS</FONT></FONT></FONT></P>
+<P ALIGN=CENTER STYLE="margin-bottom: 0cm"><BR>
+</P>
+<P ALIGN=LEFT STYLE="margin-bottom: 0cm"><FONT COLOR="#000000"><FONT FACE="Times New Roman, serif"><FONT SIZE=3>Dieser
+Wert legt fest, wie viele Messungen gemacht werden. Man sollte nicht
+uber eine Gesamtdistanz von ca. 80cm kommen, da die Sensoren mehr
+nicht hergeben und Werte zu dicht beieinander liegen. Der Wert gibt
+die Anzahl der Messungen ohne Startwert an, dh. Fuer insgesamt 16
+Messungen, muss man hier 15 eintragen.</FONT></FONT></FONT></P>
+<P ALIGN=LEFT STYLE="margin-bottom: 0cm"><BR>
+</P>
+<P ALIGN=CENTER><U><B>Kalibrierung</B></U></P>
+<P ALIGN=LEFT><BR>Im Kalibriermodus sieht man auf dem Display
+zunaechst ein Menue. Man wird aufgefordert, den Roboter auf eine
+bestimmte Distanz in cm zur Wand zu stellen. Wenn man das gemacht
+hat, drueckt man die Taste &quot;2&quot; auf der Fernbedienung. (Kann
+beim erstenmal zweimal notwendig sein.) Es wird nun aus den folgenden
+vorgegebenen Zahl von Me&szlig;werten pro Sensor ein Mittelwert
+gebildet. Dieser Wert wird dann in den beiden Tabellen (links und
+rechts getrennt) im EEPROM abgelegt. Danach wird man aufgefordert,
+eine neue Distanz einzustellen und der Vorgang beginnt von vorn.
+<BR><BR>Nach DISTANCE_STEPS Messungen ist die Kalibrierung
+abgeschlossen. Die Sensorwerte fuer die DISTANCE_STEPS Abstaende sind
+nun im EEPROM. (Meldung in Zeile drei des Displays) Man kann aber mit
+den Tasten &bdquo;1&ldquo; (zurueck) und &bdquo;3&ldquo; (vor)
+nochmal zu einzelnen Werten gehen und diese nochmal wiederholen,
+solang der letzte Wert nicht schon gemessen wurde.<BR>Mit der Taste
+&quot;0&quot; kommt man in den normalen Roboterbetrieb zurueck und
+kann die Kalibrierung gleich testen (SENSOR_TABLE_AVAILABLE muss
+dafuer definiert sein). Dies ist auch bei nicht vollstaendiger
+Kalibrierung moeglich aber nicht sinnvoll, wenn man die
+EEPROM-Tabelle fuer die Sensoren nutzen moechte.</P>
+<P ALIGN=LEFT>Waehrend des Kalibrierungsvorgangs, zeigt die dritte
+Zeile des Displays immer die aktuellen Messwert an (waehrend des
+Kalibrierungsvorgangs, Mwerte) oder das gemittelte Ergebnis an
+(Ewert). Die Anzahl der Messungen pro Entfernung legt uebrings das
+<I>#define <FONT COLOR="#000000"><FONT SIZE=2><FONT FACE="Courier New, monospace">SAMPLES_PER_AVG</FONT></FONT></FONT></I><FONT COLOR="#000000">
+<FONT FACE="Times New Roman, serif">fest, wie alle defines zu finden
+in <I>sensor_correction.h.</I></FONT></FONT><BR>Wenn die Sensoren im
+Normalbetrieb Distanzen messen, die au&szlig;erhalb des eingestellten
+Distanzbereiches der EEPROM-Tabelle liegen, werden die Werte &bdquo;Erster
+Messwert&ldquo; bzw. &bdquo;Letzter Messwert +  ein Messabstand&ldquo;
+ausgegeben. <BR><BR>Im EEPROM werden fuer den Distanzbereich
+DISTANCE_STEPS Messwerte pro Sensor gespeichert. Da die Sensoren
+jedoch auch Werte fuer Distanzen zwischen den gemessenen Distanzen
+ausgeben, wird im laufenden Betrieb des Roboters zwischen den
+Stuetzwerten interpoliert, um fuer jeden Sensorwert einen mm-Wert
+liefern zu koennen. <BR><BR>Beim Flashen mu&szlig; man aufpassen,
+dass die Tabelle im EEPROM nicht ueberschrieben wird. Um also spaeter
+ein Programmupdate zu flashen, liest man die Programm-Hexdatei mit
+&quot;Open Program (Flash) File ...&quot; ein und flasht es dann mit
+&quot;Write Program (Flash)&quot;. Die einmal im EEPROM abgelegte
+Sensortabelle kann man mit &quot;Read Data (EEPROM) auslesen und dann
+mit &quot;Save Data (EEPROM) File As ...&quot; auf Festplatte
+sichern. Dies ist auch dringend notwendig, da PonyProg den
+EEPROM-Bereich beim aufspielen eines neuen Programmes loescht, man
+muss dann die Sicherung des EEPROMs danach wieder aufspielen.
+Speichert man den EEPROM-Bereich im BIN-Format, kann diese Datei
+direkt auch fuer den ct-Sim nutzen.</P>
+<P ALIGN=CENTER><B>Nutzung der Kalibrierdaten</B></P>
+<P ALIGN=LEFT>Hat man das Define <I>SENSOR_TABLE_AVAILABLE</I> in
+ctbot.h gesetzt, so werden die Daten in der Funktion <I>sensor_abstand</I>
+in <I>sensor-low.c</I> bzw. <I>sensor-low_pc.c</I> genutzt, um aus
+den aktuellen Messwerten der Abstandssensoren moeglichst genaue und
+ruhige Abstaende zu bestimmen. Dafuer wird beim ct-bot nochmal die
+Genauigkeit der Werte durch eine Mittlung ueber mehrere Werte
+erhoeht.<BR>Beim Simulator ist die Nutzung der Kalibrierdaten auch
+moeglich. In dem man die EEPROM-Simulation benutzt und die Werte vom
+realen Bot in einer Datei im BIN-Format ablegt und diese ins
+entsprechende Verzeichnis ablegt. (Siehe auch Docu fuer
+parameter-low).<BR>Der Simulator muss jedoch dann auch entsprechend
+programmiert sein und Sensorwerte liefern und nicht Abstandswerte.
+(Siehe ct-Patchseite)</P>
+<P ALIGN=CENTER><FONT COLOR="#ff0000"><I><U><B>ACHTUNG!</B></U></I></FONT></P>
+<P ALIGN=LEFT>Fuer die Nutzung der Kalibrierung ist es wichtig, das
+die Konstanten (DEFINEs) immer die Werte haben, die auch bei der
+Aufnahme der Daten aktuell waren. Nutzt man die Daten auch im
+Simulator, so muessen die Werte fuer PC und MCU identisch sein.</P>
+</BODY>
+</HTML>
Index: include/parameter-low.h
===================================================================
RCS file: include/parameter-low.h
diff -N include/parameter-low.h
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ include/parameter-low.h	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,52 @@
+/*
+ * c't-Sim - Robotersimulator fuer den c't-Bot
+ * 
+ * This program is free software; you can redistribute it
+ * and/or modify it under the terms of the GNU General
+ * Public License as published by the Free Software
+ * Foundation; either version 2 of the License, or (at your
+ * option) any later version. 
+ * This program is distributed in the hope that it will be 
+ * useful, but WITHOUT ANY WARRANTY; without even the implied
+ * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
+ * PURPOSE. See the GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public 
+ * License along with this program; if not, write to the Free 
+ * Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307, USA.
+ * 
+ */
+
+/*! @file 	parameter-low.h  
+ * @brief 	Low-Level Routinen fuer den Zugriff auf das EEPROM des c't-Bots
+ * @author 	Achim Pankalla (achim.pankalla@gmx.de)
+ * @date 	13.05.06
+*/
+#ifndef parameter_low_H_
+#define parameter_low_H_
+
+/******************************************************************************
+* EEPROM Memory map zur Uebersicht welche Adressbereiche bereits genutzt werden
+******************************************************************************/
+#define EEPROM_ADDR_DIST_LTABLE 0x0000
+#define EEPROM_SIZE_DIST_LTABLE 0x0020
+#define EEPROM_ADDR_DIST_RTABLE 0x0020
+#define EEPROM_SIZE_DIST_RTABLE 0x0020
+
+/*! 
+ * Speichert Daten im EEPROM.
+ * @param address Adresse im EEPROM zwischen 0 und 1023.
+ * @param data Variable mit den abzulegenen Daten.
+ * @param size Groesse der Daten in Byte.
+ */ 
+extern void store_parameter(uint16 address, uint16 data, uint8 size);
+
+/*! 
+ * Laedt Daten aus dem EEPROM.
+ * @param address Adresse im EEPROM zwischen 0 und 1023.
+ * @param size Groesse der Daten in Byte.
+ * @return Wert der Speicheraddresse im EEPROM
+ */ 
+extern uint16 load_parameter(uint16 address, uint8 size);
+
+#endif
Index: mcu/parameter-low.c
===================================================================
RCS file: mcu/parameter-low.c
diff -N mcu/parameter-low.c
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ mcu/parameter-low.c	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,67 @@
+/*
+ * c't-Bot
+ * 
+ * This program is free software; you can redistribute it
+ * and/or modify it under the terms of the GNU General
+ * Public License as published by the Free Software
+ * Foundation; either version 2 of the License, or (at your
+ * option) any later version. 
+ * This program is distributed in the hope that it will be 
+ * useful, but WITHOUT ANY WARRANTY; without even the implied
+ * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
+ * PURPOSE. See the GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public 
+ * License along with this program; if not, write to the Free 
+ * Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307, USA.
+ * 
+ */
+
+/*! @file 	parameter-low.c  
+ * @brief 	Low-Level Routinen fuer den Zugriff auf das EEPROM des c't-Bots
+ * @author 	Achim Pankalla (achim.pankalla@gmx.de)
+ * @date 	23.06.06
+*/
+
+#ifdef MCU
+#include "global.h"
+#include <avr/eeprom.h>
+uint8 eeprom[1024] EEMEM;
+
+/*! 
+ * Traegt die uebergebenen Daten in das EEPROM des ct-bot ein. 
+ * @param address Adresse im EEPROM zwischen 0 und 1023.
+ * @param data Daten die abgelegt werden sollen.
+ * @param size Groesse der Daten in Byte.
+ */  
+void store_parameter(uint16 address, uint16 data, uint8 size) {
+	if(address < 0 || address > (size == 1 ? 1023 : 1022))
+		return;
+	
+	eeprom_write_byte(&eeprom[address], data % 256);
+	if(size == 2) { 
+		eeprom_write_byte(&eeprom[address + 1], data / 256);
+	}
+	return;
+}
+
+/*! 
+ * Liest die gewuenschten Daten aus den EEPROM des ct-bot. 
+ * @param address Adresse im EEPROM zwischen 0 und 1023.
+ * @param size Groesse der Daten in Byte.
+ * @return Aus dem EEPROM gelesener Wert.
+ */  
+uint16 load_parameter(uint16 address, uint8 size) {
+	uint16 rvalue = 0;
+	
+	if(address < 0 || address > (size == 1 ? 1023 : 1022))
+		return(0);
+	
+	rvalue = eeprom_read_byte(&eeprom[address]);
+	if(size == 2) { 
+		rvalue += eeprom_read_byte(&eeprom[address + 1]) * 256;
+	}
+	return(rvalue);
+}
+
+#endif
Index: pc/parameter-low_pc.c
===================================================================
RCS file: pc/parameter-low_pc.c
diff -N pc/parameter-low_pc.c
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ pc/parameter-low_pc.c	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,104 @@
+/*
+ * c't-Sim - Robotersimulator fuer den c't-Bot
+ * 
+ * This program is free software; you can redistribute it
+ * and/or modify it under the terms of the GNU General
+ * Public License as published by the Free Software
+ * Foundation; either version 2 of the License, or (at your
+ * option) any later version. 
+ * This program is distributed in the hope that it will be 
+ * useful, but WITHOUT ANY WARRANTY; without even the implied
+ * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
+ * PURPOSE. See the GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public 
+ * License along with this program; if not, write to the Free 
+ * Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307, USA.
+ * 
+ */
+
+/*! @file 	parameter-low_pc.c  
+ * @brief 	Low-Level Routinen fuer den Zugriff auf das simulierte EEPROM des Sim-c't-Bots
+ * @author 	Achim Pankalla (achim.pankalla@gmx.de)
+ * @date 	24.06.06
+*/
+
+#include "ct-Bot.h"
+
+#ifdef PC
+
+#include <errno.h>
+#include <io.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <stdio.h>
+
+#define EEPROM_FILENAME	"e:\\temp\\eeprom.bin" 	/*<! Name und Pfad der EEPROM Datei. Verzeichnis muss existieren. Backslash doppeln!*/
+
+/*! 
+ * Traegt die uebergebenen Daten in das simulierte EEPROM ein. Dieses simulierte EEPROM 
+ * besteht aus einer Datei. Ist sie nicht vorhanden, so wird eine angelegt. Sie ist im Binaer
+ * Format und kann direkt mit zB. PonyProg in den realen Bot eingespielt werden.
+ * Es koennen Bytes (uint8 size = 1) und Integer (uint16 size = 2) uebergeben werden.
+ * @param address Adresse im EEPROM zwischen 0 und 1023.
+ * @param data Daten die abgelegt werden sollen.
+ * @param size Groesse der Daten in Byte.
+ */  
+void store_parameter(uint16 address, uint16 data, uint8 size) {
+	int16 fh = 0; 	//Dateizeiger
+	uint16 i = 0; //Laufvariable
+	uint8 dataline[2];	//Speicher fuer Datenausgabe
+
+	if(address < 0 || address > (size == 1 ? 1023 : 1022)) //Adresse checken
+		return;
+
+	if(access(EEPROM_FILENAME, R_OK) == -1){ //Testen, ob Datei vorhanden ist.
+		if((fh = open(EEPROM_FILENAME, O_BINARY|O_CREAT|O_RDWR, S_IWRITE|S_IREAD)) == -1) //wenn nicht, dann erstellen
+			return;
+		for(i = 0; i < 1024; i++) //Leere EEPROM Datei erstellen
+			write(fh, "\377", 1);
+		close(fh);
+	}
+	if((fh = open(EEPROM_FILENAME, O_BINARY|O_WRONLY)) == -1) //ansonsten Datei oeffnen
+		return;
+
+	//Daten eintragen
+	lseek(fh, address, SEEK_SET); //Schreibzeiger setzen
+	dataline[0] = data%256;
+	dataline[1] = data/256;
+	write(fh, dataline, size);	//Daten schreiben);
+
+	close(fh);
+	return;	
+}
+
+/*! 
+ * Liest die gewuenschten Daten aus eine simulierten EEPROM. Dieses simulierte EEPROM 
+ * besteht aus der Datei eeprom.bin. Ist die Datei nicht vorhanden, so wird 0x00 zurueck-
+ * gegeben
+ * @param address Adresse im EEPROM zwischen 0 und 1023.
+ * @param size Groesse der Daten in Byte.
+ * @return Aus dem EEPROM gelesener Wert.
+ */  
+uint16 load_parameter(uint16 address, uint8 size) {
+	int16 fh = 0; 	//Dateizeiger
+	uint8 dataline[2] = {0,0};	//String fuer Datenausgabe
+
+	if(address < 0 || address > (size == 1 ? 1023 : 1022)) //Adresse checken
+		return(0);
+
+	if(access(EEPROM_FILENAME, R_OK) == -1){ //Testen, ob Datei vorhanden ist.
+		return(0);
+	}
+	if((fh = open(EEPROM_FILENAME, O_BINARY|O_RDONLY)) == -1) //ansonsten Datei oeffnen
+		return(0);
+
+	//Daten eintragen
+	lseek(fh, address, SEEK_SET); //Lesezeiger setzen
+	read(fh, dataline, size);	//Daten schreiben);
+	close(fh);
+
+	return((uint16)dataline[0] + (uint16)dataline[1]*256);	
+}
+
+#endif
