Index: Changelog.txt
===================================================================
RCS file: /ctbot/ct-Sim/Changelog.txt,v
retrieving revision 1.6
diff -u -r1.6 Changelog.txt
--- Changelog.txt	5 Mar 2006 17:05:28 -0000	1.6
+++ Changelog.txt	6 Mar 2006 15:43:35 -0000
@@ -1,5 +1,9 @@
 CHANGELOG fuer c't-Sim
 ======================
+2006-03-06	Markus Lang (lang@repulse.de)
+- Kontrollfenster und World-Fenster mittels einer SplitPane zu einem 
+  großen c't-Sim Hauptfenster zusammengefügt. Weniger Fensterwald :)
+
 2006-03-03	Heinrich Peters (Heinrich-Peters@gmx.net)
 - LCD-Ausgabe Ã¼berarbeitet
 - LEDs werden jetzt im Simulator angezeigt
Index: ctSim/ctSim/Controller/Controller.java
===================================================================
RCS file: /ctbot/ct-Sim/ctSim/ctSim/Controller/Controller.java,v
retrieving revision 1.3
diff -u -r1.3 Controller.java
--- ctSim/ctSim/Controller/Controller.java	17 Feb 2006 16:03:44 -0000	1.3
+++ ctSim/ctSim/Controller/Controller.java	6 Mar 2006 15:43:36 -0000
@@ -42,7 +42,9 @@
 	private static World world;
 
 	private static ControlFrame controlFrame;
-
+	
+	private static CtSimFrame ctSimFrame;
+	
 	private static boolean test;
 
 	/**
@@ -56,6 +58,13 @@
 		System.out.println("Simulator startet");
 		world = new World();
 		controlFrame = new ControlFrame();
+		/* Markus Lang 2006-03-06:
+		 * Hauptfenster erstellen mit den bereits vorhandenen 
+		 * ControlFRame und WoldView Instanzen.
+		 */
+		ctSimFrame = new CtSimFrame(controlFrame, world.getWorldView());
+		controlFrame.setCtSimFrameInstance(ctSimFrame);
+		
 
 		Object[] options = { "externer TCP/IP-Bot", "integrierter Testbot" };
 		int n = JOptionPane.showOptionDialog(null,
@@ -134,7 +143,10 @@
 	 */
 	public static void endSim() {
 		world.die();
-		controlFrame.dispose();
+		/* Markus Lang 2006-03-06:
+		 * dispose() wird jetzt auf der ctSimFrame Klasse ausgeführt
+		 */
+		ctSimFrame.dispose();
 		System.exit(0);
 	}
 
Index: ctSim/ctSim/Model/World.java
===================================================================
RCS file: /ctbot/ct-Sim/ctSim/ctSim/Model/World.java,v
retrieving revision 1.6
diff -u -r1.6 World.java
--- ctSim/ctSim/Model/World.java	22 Feb 2006 16:24:55 -0000	1.6
+++ ctSim/ctSim/Model/World.java	6 Mar 2006 15:43:41 -0000
@@ -1032,8 +1032,6 @@
 	 */
 	public void die() {
 		run = false;
-		// Schliesst das Fenster zur Welt:
-		worldView.dispose();
 		// Unterbricht sich selbst,
 		// interrupt ruft cleanup auf:
 		this.interrupt();
Index: ctSim/ctSim/View/ControlFrame.java
===================================================================
RCS file: /ctbot/ct-Sim/ctSim/ctSim/View/ControlFrame.java,v
retrieving revision 1.3
diff -u -r1.3 ControlFrame.java
--- ctSim/ctSim/View/ControlFrame.java	17 Feb 2006 16:03:44 -0000	1.3
+++ ctSim/ctSim/View/ControlFrame.java	6 Mar 2006 15:43:43 -0000
@@ -43,7 +43,12 @@
  * 
  */
 
-public class ControlFrame extends javax.swing.JFrame {
+/* Markus Lang 2006-03-06:
+ * ControlFrame erweitert nun die JPanel Klasse, da es kein
+ * eingenständiges Fenster mehr ist. Somit ist der Name
+ * ControlFrame eigentlich missverständlich.
+ */
+public class ControlFrame extends JPanel {
 	private static final long serialVersionUID = 1L;
 
 	private JTabbedPane controlPanels;
@@ -68,7 +73,11 @@
 	private JPanel slowMotionPanel;
 	private JTextField slowMotionText;
 	
-	
+	/* Markus Lang 2006-03-06:
+	 * Instanzen für das JSplitPane Hauptfenster
+	 */
+	private CtSimFrame ctSimFrame;
+		
 	private JButton endButton;
 
 	/**
@@ -90,16 +99,13 @@
 		Dimension buttDim = new Dimension(20, 70);
 
 		try {
-			setDefaultCloseOperation(EXIT_ON_CLOSE);
-			BoxLayout thisLayout = new BoxLayout(getContentPane(),
-					javax.swing.BoxLayout.Y_AXIS);
-			getContentPane().setLayout(thisLayout);
-			this.setTitle("Kontrolltafel");
+			BoxLayout thisLayout = new BoxLayout(this, javax.swing.BoxLayout.Y_AXIS);
+			this.setLayout(thisLayout);
 			{
 				buttonPanel = new JPanel();
 				BoxLayout panelLayout = new BoxLayout(buttonPanel,
 						javax.swing.BoxLayout.X_AXIS);
-				getContentPane().add(buttonPanel);
+				this.add(buttonPanel);
 				buttonPanel.setLayout(panelLayout);
 				{
 					pauseButton = new JButton();
@@ -159,7 +165,7 @@
 					slowMotionSliderPanel.add(slowMotionSlider);
 					slowMotionPanel.add(slowMotionBoxPanel);
 					slowMotionPanel.add(slowMotionSliderPanel);
-					getContentPane().add(slowMotionPanel);
+					this.add(slowMotionPanel);
 				}
 				
 				// und dann die Listener dazuhaengen
@@ -217,11 +223,8 @@
 
 			{
 				controlPanels = new JTabbedPane();
-				getContentPane().add(controlPanels);
+				this.add(controlPanels);
 			}
-			setSize(300, 200);
-			setLocation(500,0);
-			pack();
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
@@ -238,7 +241,11 @@
 		controlPanels.addTab(bot.getBotName(), null, bot.getPanel(), null);
 		// Dem Panel anzeigen, wo es dargestellt wird
 		bot.getPanel().setFrame(this);
-		pack();
+		/* Markus Lang 2006-03-06:
+		 * JSplitPlane über die Größenänderung informieren
+		 * (Ersatz für den alten pack() Aufruf der JFrame Klasse)
+		 */
+		this.ctSimFrame.updateSliderPosition();
 	}
 
 	/**
@@ -246,5 +253,15 @@
 	 */
 	public JTabbedPane getControlPanels() {
 		return controlPanels;
+	}
+
+	/** Markus Lang 2006-03-06:
+	 * Diese Methode setzt die interne CtSimFrame Instanz
+	 * 
+	 * @param ctSimFrame die neue CtSimFrame Instanz
+	 * @author Markus Lang
+	 */
+	public void setCtSimFrameInstance(CtSimFrame ctSimFrame) {
+		this.ctSimFrame = ctSimFrame;
 	}
 }
Index: ctSim/ctSim/View/WorldView.java
===================================================================
RCS file: /ctbot/ct-Sim/ctSim/ctSim/View/WorldView.java,v
retrieving revision 1.3
diff -u -r1.3 WorldView.java
--- ctSim/ctSim/View/WorldView.java	17 Feb 2006 16:03:44 -0000	1.3
+++ ctSim/ctSim/View/WorldView.java	6 Mar 2006 15:43:44 -0000
@@ -40,7 +40,7 @@
 import javax.media.j3d.*;
 import javax.vecmath.*;
 
-import javax.swing.JFrame;
+import javax.swing.JPanel;
 
 /**
  * Realisiert die Anzeige der Welt mit allen Hindernissen und Robotern
@@ -49,7 +49,12 @@
  * @author Lasse Schwarten (lasse@schwarten.org)
  * 
  */
-public class WorldView extends JFrame {
+
+/* Markus Lang 2006-03-06:
+ * WorldView erweitert nun die JPanel Klasse, da es kein
+ * eigenständiges Fenster mehr ist.
+ */
+public class WorldView extends JPanel {
 
 	private static final long serialVersionUID = 1L;
 
@@ -97,11 +102,7 @@
 	 *            Die Welt, die das Fenster darstellen soll
 	 */
 	public WorldView(World w) {
-		super("c't-Sim");
-				
-		getContentPane().setLayout(new BorderLayout());
-		this.setSize(500, 500);
-
+		this.setLayout(new BorderLayout());
 		
         GraphicsConfigTemplate3D template = new GraphicsConfigTemplate3D();
         GraphicsEnvironment env =
@@ -111,7 +112,7 @@
         // Leinwand fuer die Welt erzeugen
 		worldCanvas = new Canvas3D(dev.getBestConfiguration(template));
 
-		this.getContentPane().add(worldCanvas);
+		this.add(worldCanvas);
 		
 		// Material für die Lichtreflektionen der Welt definieren
 		// Boden- und Bot-Material
@@ -238,12 +239,9 @@
 //		universe.addBranchGraph(bgt);
 		
 		try {
-			setDefaultCloseOperation(EXIT_ON_CLOSE);
 			worldCanvas.setVisible(true);
 			this.setVisible(true);
-			this.pack();
 			this.repaint();
-
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
Index: ctSim/ctSim/View/CtSimFrame.java
===================================================================
RCS file: ctSim/ctSim/View/CtSimFrame.java
diff -N ctSim/ctSim/View/CtSimFrame.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ ctSim/ctSim/View/CtSimFrame.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,103 @@
+package ctSim.View;
+
+import java.awt.BorderLayout;
+import java.awt.Dimension;
+import java.awt.Toolkit;
+import java.awt.event.WindowEvent;
+import java.awt.event.WindowStateListener;
+
+import javax.swing.BoxLayout;
+import javax.swing.JFrame;
+import javax.swing.JSplitPane;
+
+/** 
+ * Die Haupt-View-Klasse des c't-Sim welche die ControlPanels und die
+ * WorldView Klasse in einer großen JSplitPane zusammen führt.
+ * 
+ * @author Markus Lang (lang@repulse.de)
+ * @version 2006-03-06
+ */
+public class CtSimFrame extends JFrame implements WindowStateListener {
+	private static final long serialVersionUID = 1L;
+
+	private JSplitPane splitPane;
+	private ControlFrame controlFrame;
+	
+	/**
+	 * Constructor: Erzeugt ein neues ctSimFrame Hauptfenster
+	 * 
+	 * @param controlFrame die ControlFrame Instanz (leftComponent)
+	 * @param worldView  the WorldView Instanz (rightComponent)
+	 */
+	public CtSimFrame(ControlFrame controlFrame, WorldView worldView) {
+		// super constructor aufrufen
+		super();
+		// gui elemente laden
+		this.controlFrame = controlFrame;
+		this.initGUI(worldView);
+		// eventListener registrieren
+		this.addWindowStateListener(this);
+		// fenstergröße festlegen
+		Dimension dimension = new Dimension(1024, 700);
+		this.setMinimumSize(dimension);
+		this.setPreferredSize(dimension);
+		this.setSize(dimension);
+		// fenster positionieren
+		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
+		this.setBounds(
+				(screenSize.width / 2) - (dimension.width / 2),
+				(screenSize.height / 2) - (dimension.height / 2),
+				dimension.width, dimension.height);
+		this.setVisible(true);
+		this.pack();
+	}
+	
+	/**
+	 * Initialisierung der GUI Elemente
+	 *  
+	 * @param worldView  the WorldView Instanz (rightComponent)
+	 */
+	private void initGUI(WorldView worldView) {
+		// layout definieren
+		this.setTitle("c't-Sim");
+		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
+		BoxLayout thisLayout = new BoxLayout(getContentPane(),
+				javax.swing.BoxLayout.Y_AXIS);
+		this.getContentPane().setLayout(thisLayout);
+		// min & max größe des controlFrame setzen
+		Dimension preferedSize = this.controlFrame.getPreferredSize();
+		this.controlFrame.setMinimumSize(preferedSize);
+		this.controlFrame.setMaximumSize(preferedSize);
+		// splitpane erstellen
+		this.splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, this.controlFrame, worldView); 
+		this.splitPane.setContinuousLayout(false); 
+		this.splitPane.setOneTouchExpandable(true);
+		
+		this.getContentPane().add(this.splitPane, BorderLayout.CENTER); 
+	}
+	
+	/**
+	 * Beim Aufruf dieser Methode wird die Slider-Position neu bestimmt
+	 */
+	public void updateSliderPosition() {
+		// min & max größe des controlFrame setzen
+		Dimension preferedSize = this.controlFrame.getPreferredSize();
+		this.controlFrame.setMinimumSize(preferedSize);
+		this.controlFrame.setMaximumSize(preferedSize);
+		this.controlFrame.revalidate();
+		// splitPane Divider positionieren
+		this.splitPane.setDividerLocation(
+				this.controlFrame.getPreferredSize().width + this.splitPane.getInsets().left);
+	}
+	
+	/**
+	 * Implementierte Methode des WindowStateListener Interfaces
+	 * Wird dazu genutzt bei Minimieren/Maximieren des Fensters die 
+	 * Divider Position der SplitPlane zu aktualisieren.
+	 * 
+	 * @see java.awt.event.WindowStateListener#windowStateChanged(java.awt.event.WindowEvent)
+	 */
+	public void windowStateChanged(WindowEvent arg0) {
+		this.updateSliderPosition();
+	}
+}
