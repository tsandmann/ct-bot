Index: Changelog.txt
===================================================================
RCS file: /ctbot/ct-Sim/Changelog.txt,v
retrieving revision 1.9
diff -u -r1.9 Changelog.txt
--- Changelog.txt	20 Mar 2006 19:01:13 -0000	1.9
+++ Changelog.txt	5 Apr 2006 17:41:25 -0000
@@ -1,6 +1,10 @@
 CHANGELOG fuer c't-Sim
 ======================
 
+2006-04-05 Johannes Dörnte (doernte@gmx.de)
+Waehlen der Welt in world.java ueber eine Konstante.
+Man kann zwischen dem Labyrinth aus der ct05 und dem Hindernis-Parcours aus der ct07 wechseln.
+
 2006-03-20 Markus Lang (lang@repulse.de)
 Kontrollfenster und World-Fenster mittels einer SplitPane zu einem 
 grossen c't-Sim Hauptfenster zusammengefügt. Weniger Fensterwald :)
Index: ctSim/ctSim/Model/World.java
===================================================================
RCS file: /ctbot/ct-Sim/ctSim/ctSim/Model/World.java,v
retrieving revision 1.8
diff -u -r1.8 World.java
--- ctSim/ctSim/Model/World.java	17 Mar 2006 17:10:34 -0000	1.8
+++ ctSim/ctSim/Model/World.java	5 Apr 2006 17:41:25 -0000
@@ -68,9 +68,19 @@
  * @author Lasse Schwarten (lasse@schwarten.org)
  * @author Christoph Grimmer (c.grimmer@futurio.de)
  * @author Werner Pirkl (morpheus.the.real@gmx.de)
+ * @author Johannes Dörnte (doernte@gmx.de)
  */
 public class World extends Thread {
 
+	/** 
+	 *  Worldchanger - mit ihm lassen sich im Scenegraphen verschiedene Welten auswaehlen.
+	 *  In zwei switch-Anweisungen werden abhaengig von WORLDCHANGER
+	 *  unterschiedliche Lampen und Hindernissse in die Welt eingebunden.
+	 *  WORLDCHANGER = 1:	Labyrinth aus der ct05 
+	 *  WORLDCHANGER = 2:	Hindernis-Parcours aus der ct07 
+	 */
+	private final int WORLDCHANGER = 2;
+	
 	/** Ein Link auf den zugehoerigen Controller */
 	private Controller controller;
 
@@ -535,15 +545,11 @@
 	 */
 	public BranchGroup createSceneGraph() {
 
+		// Lampenpositionen fuer die 8 Lampen des Hindernis-Parcours der Welt 2
 		float[][] pillarPositions = { { 0.2f, -1f }, { 0.2f, -0.5f },
 				{ 0.2f, 0f }, { 0.2f, 0.5f }, { 0.05f, 0.9f },
 				{ -0.48f, 1.0f }, { -1.0f, 1.0f }, { -1.35f, 0.65f } };
 
-		// Die Lichtquellen aus Version 0.2 des Simulators
-		// float[][] oldLights =
-		// {{PLAYGROUND_WIDTH/2,PLAYGROUND_HEIGHT/2,0.5f},{PLAYGROUND_WIDTH/2 -
-		// 0.35f, 0f, 0.5f}};
-
 		createAppearance();
 		// Die Wurzel des Ganzen:
 		BranchGroup objRoot = new BranchGroup();
@@ -561,7 +567,10 @@
 
 		objRoot.addChild(worldTG);
 
-		// Lichtquellen einfuegen
+		//
+		// Lichtquellen *********************************************************************
+		//
+		
 		// Streulicht (ambient light)
 		BoundingSphere ambientLightBounds = new BoundingSphere(new Point3d(0d,
 				0d, 0d), 100d);
@@ -581,18 +590,73 @@
 				0d, 0d), 10d);
 		Color3f pointLightColor = new Color3f(1.0f, 1.0f, 0.9f);
 
-		/*
-		 * Fuer den Hindernis-Parcours brauchen wir 8 Lichtquellen und 8
-		 * Saeulen. Um nicht jede Lichtquelle von Hand bauen zu muessen, 
-		 * wurde alles in eine Subroutine ausgelagert.
-		 */
-
-		for (float[] pos : pillarPositions) {
-			createLight(pointLightBounds, pointLightColor, pos[0], pos[1], 0.5f);
+		// Waehlen der Lichtpunkte fuer die entsprechende Welt
+		// Abhaengig von WORLDCHANGER werden die Lichtpunkte fuer die entsprechende Welt definiert
+		switch (WORLDCHANGER) {
+			case 1:
+				// Lichtquelle oben rechts
+				// erzeugen
+				PointLight pointLight1  = new PointLight();
+		    	pointLight1.setColor(pointLightColor);
+		    	pointLight1.setPosition(PLAYGROUND_WIDTH/2,PLAYGROUND_HEIGHT/2,0.5f);
+		    	pointLight1.setInfluencingBounds(pointLightBounds);
+		    	pointLight1.setAttenuation(1f,3f,0f);
+				pointLight1.setEnable(true);
+		    	lightBG.addChild (pointLight1);
+		    	// verschieben
+		    	Transform3D lsTranslate = new Transform3D();
+		    	lsTranslate.set(new Vector3f(PLAYGROUND_WIDTH/2,PLAYGROUND_HEIGHT/2,1.5f));
+		    	TransformGroup lsTg1 = new TransformGroup(lsTranslate);	
+		    	Sphere lightSphere1 = new Sphere(0.03f);
+		    	lightSphere1.setAppearance(getLightSourceAppear());
+		    	lightSphere1.setPickable(true);
+		    	lsTg1.addChild(lightSphere1);
+		    	lightBG.addChild(lsTg1);
+
+		    	// Lichtquelle im rechten Durchgang
+				// erzeugen
+				PointLight pointLight2  = new PointLight();
+		    	pointLight2.setColor(pointLightColor);
+		    	pointLight2.setPosition(PLAYGROUND_WIDTH/2 - 0.35f, 0f, 0.5f);
+		    	pointLight2.setInfluencingBounds(pointLightBounds);
+		    	pointLight2.setAttenuation(1f,3f,0f);
+		    	pointLight2.setEnable(true);
+		    	lightBG.addChild (pointLight2);
+		    	// verschieben
+		    	lsTranslate = new Transform3D();
+		    	lsTranslate.set(new Vector3f(PLAYGROUND_WIDTH/2 - 0.35f, 0f, 0.5f));
+		    	TransformGroup lsTg2 = new TransformGroup(lsTranslate);	
+		    	Sphere lightSphere2 = new Sphere(0.02f);
+		    	lightSphere2.setAppearance(getLightSourceAppear());
+		    	lightSphere2.setPickable(true);
+		    	lsTg2.addChild(lightSphere2);
+		    	lightBG.addChild(lsTg2);
+		    	break;
+			case 2:
+				// Erzeuge und verschiebe 8 Lampen fuer den Hindernis-Parcours
+				//
+				// Fuer den Hindernis-Parcours brauchen wir 8 Lichtquellen und 8
+				// Saeulen. Um nicht jede Lichtquelle von Hand bauen zu muessen, 
+				// wurde alles in eine Subroutine ausgelagert.
+				// Die Lichtquellen aus ct07 fuer den Hindernis-Parcours
+				for (float[] pos : pillarPositions) {
+					createLight(pointLightBounds, pointLightColor, pos[0], pos[1], 0.5f);
+				}
+				break;
+			default:
+				// Welt 2 - weil es weniger Programmcode ist :-)
+				for (float[] pos : pillarPositions) {
+					createLight(pointLightBounds, pointLightColor, pos[0], pos[1], 0.5f);
+				}
+				break;
 		}
 
 		worldTG.addChild(lightBG);
 
+		//
+		// Boden *******************************************************************************
+		//
+
 		// Die Branchgroup fuer den Boden
 		terrainBG = new BranchGroup();
 		terrainBG.setCapability(TransformGroup.ALLOW_PICKABLE_WRITE);
@@ -613,6 +677,10 @@
 		tgT.addChild(floor);
 		terrainBG.addChild(tgT);
 
+		//
+		// Linien *******************************************************************************
+		//
+
 		// Erzeuge Linien auf dem Boden
 		Shape3D lineFloor = createLineShape();
 		lineFloor.setAppearance(getPlaygroundLineAppear());
@@ -629,6 +697,10 @@
 
 		worldTG.addChild(terrainBG);
 
+		//
+		// Hindernisse *******************************************************************************
+		//
+
 		// Die TranformGroup fuer alle Hindernisse:
 		sceneLight.setObstBG(new BranchGroup());
 		// Damit spaeter Bots hinzugefuegt werden koennen:
@@ -638,7 +710,18 @@
 		// Objekte sind fest
 		sceneLight.getObstBG().setPickable(true);
 
+		// Hindernisse werden an die richtige Position geschoben
+
+		// Zuerst werden sie gemeinsam so verschoben, dass ihre Unterkante genau
+		// buendig mit der Unterkante des Bodens ist:
+		translate.set(new Vector3d(0d, 0d, 0.2d - PLAYGROUND_THICKNESS));
+		TransformGroup tgO = new TransformGroup(translate);
+		tgO.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
+		tgO.setPickable(true);
+		sceneLight.getObstBG().addChild(tgO);
+
 		// Die vier Randmauern der Welt:
+		// erzeugen
 		Box north = new Box(PLAYGROUND_WIDTH / 2 + 0.2f, 0.1f, 0.2f,
 				getObstacleAppear());
 		north.setPickable(true);
@@ -656,56 +739,7 @@
 		west.setPickable(true);
 		west.setName("West");
 
-		// sechs Zwischenwaende aus Version 0.2, sind ausgebaut fuer den neuen Parcours
-		// Box wall1 = new Box(0.1f, 0.05f, 0.2f,
-		// worldView.getObstacleAppear());
-		// wall1.setPickable(true);
-		// wall1.setName("Wall1");
-		//		
-		// Box wall2 = new Box(PLAYGROUND_WIDTH/2 - 0.45f, 0.05f, 0.2f,
-		// worldView.getObstacleAppear());
-		// wall2.setPickable(true);
-		// wall2.setName("Wall2");
-		//		
-		// Box wall3 = new Box(0.1f, 0.05f, 0.2f,
-		// worldView.getObstacleAppear());
-		// wall3.setPickable(true);
-		// wall3.setName("Wall3");
-		//		
-		// Box wall4 = new Box(0.2f, 0.025f, 0.2f,
-		// worldView.getObstacleAppear());
-		// wall4.setPickable(true);
-		// wall4.setName("Wall4");
-		//
-		// Box wall5 = new Box(0.4f, 0.025f, 0.2f,
-		// worldView.getObstacleAppear());
-		// wall5.setPickable(true);
-		// wall5.setName("Wall5");
-		//		
-		// Box wall6 = new Box(0.025f, 0.3f, 0.2f,
-		// worldView.getObstacleAppear());
-		// wall6.setPickable(true);
-		// wall6.setName("Wall6");
-
-		// Hindernisse werden an die richtige Position geschoben
-
-		// Zuerst werden sie gemeinsam so verschoben, dass ihre Unterkante genau
-		// buendig mit der Unterkante des Bodens ist:
-		translate.set(new Vector3d(0d, 0d, 0.2d - PLAYGROUND_THICKNESS));
-		TransformGroup tgO = new TransformGroup(translate);
-		tgO.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
-		tgO.setPickable(true);
-		sceneLight.getObstBG().addChild(tgO);
-
-		/* Zusaetzlich zu den Lichtquellen werden 8 kleine Saeulen erzeugt. */
-
-		for (float[] pos : pillarPositions) {
-			createPillar(pillarPositions, tgO, pos[0], pos[1]);
-		}
-
-		// Danach bekommt jedes Hindernis seine eigene TransformGroup, um es
-		// an den individuellen Platz zu schieben:
-
+		// verschieben
 		translate.set(new Vector3f(0f, PLAYGROUND_HEIGHT / 2 + 0.1f, 0f));
 		TransformGroup tgN = new TransformGroup(translate);
 		tgN.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
@@ -734,51 +768,91 @@
 		tgW.addChild(west);
 		tgO.addChild(tgW);
 
-		// Trennwaende aus Version 0.2 an die richtigen Positionen schieben:
-		// translate.set(new Vector3f(-(PLAYGROUND_WIDTH/2) + 0.1f,
-		// 0f, 0f));
-		// TransformGroup tgWall1 = new TransformGroup(translate);
-		// tgWall1.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
-		// tgWall1.setPickable(true);
-		// tgWall1.addChild(wall1);
-		// tgO.addChild(tgWall1);
-		//		
-		// translate.set(new Vector3f(-0.05f, 0f, 0f));
-		// TransformGroup tgWall2 = new TransformGroup(translate);
-		// tgWall2.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
-		// tgWall2.setPickable(true);
-		// tgWall2.addChild(wall2);
-		// tgO.addChild(tgWall2);
-		//		
-		// translate.set(new Vector3f((PLAYGROUND_WIDTH/2) - 0.1f,
-		// 0f, 0f));
-		// TransformGroup tgWall3 = new TransformGroup(translate);
-		// tgWall3.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
-		// tgWall3.setPickable(true);
-		// tgWall3.addChild(wall3);
-		// tgO.addChild(tgWall3);
-		//		
-		// translate.set(new Vector3f(0.6f, -1f, 0f));
-		// TransformGroup tgWall4 = new TransformGroup(translate);
-		// tgWall4.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
-		// tgWall4.setPickable(true);
-		// tgWall4.addChild(wall4);
-		// tgO.addChild(tgWall4);
-		//
-		// translate.set(new Vector3f(0.1f,
-		// -0.65f, 0f));
-		// TransformGroup tgWall5 = new TransformGroup(translate);
-		// tgWall5.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
-		// tgWall5.setPickable(true);
-		// tgWall5.addChild(wall5);
-		// tgO.addChild(tgWall5);
-		//		
-		// translate.set(new Vector3f(-0.1f, -0.35f, 0f));
-		// TransformGroup tgWall6 = new TransformGroup(translate);
-		// tgWall6.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
-		// tgWall6.setPickable(true);
-		// tgWall6.addChild(wall6);
-		// tgO.addChild(tgWall6);
+		// Waehlen der Hindernisse fuer die entsprechende Welt
+		switch (WORLDCHANGER) {
+			case 1:
+				// Erzeuge Labyrinth
+				Box wall1 = new Box(0.1f, 0.05f, 0.2f, getObstacleAppear());
+				wall1.setPickable(true);
+				wall1.setName("Wall1");
+						
+				Box wall2 = new Box(PLAYGROUND_WIDTH/2 - 0.45f, 0.05f, 0.2f, getObstacleAppear());
+				wall2.setPickable(true);
+				wall2.setName("Wall2");
+						
+				Box wall3 = new Box(0.1f, 0.05f, 0.2f, getObstacleAppear());
+				wall3.setPickable(true);
+				wall3.setName("Wall3");
+						
+				Box wall4 = new Box(0.2f, 0.025f, 0.2f,	getObstacleAppear());
+				wall4.setPickable(true);
+				wall4.setName("Wall4");
+				
+				Box wall5 = new Box(0.4f, 0.025f, 0.2f,	getObstacleAppear());
+				wall5.setPickable(true);
+				wall5.setName("Wall5");
+						
+				Box wall6 = new Box(0.025f, 0.3f, 0.2f,	getObstacleAppear());
+				wall6.setPickable(true);
+				wall6.setName("Wall6");
+
+				// Verschiebe Labyrinth
+				translate.set(new Vector3f(-(PLAYGROUND_WIDTH/2) + 0.1f, 0f, 0f));
+				TransformGroup tgWall1 = new TransformGroup(translate);
+				tgWall1.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
+				tgWall1.setPickable(true);
+				tgWall1.addChild(wall1);
+				tgO.addChild(tgWall1);
+						
+				translate.set(new Vector3f(-0.05f, 0f, 0f));
+				TransformGroup tgWall2 = new TransformGroup(translate);
+				tgWall2.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
+				tgWall2.setPickable(true);
+				tgWall2.addChild(wall2);
+				tgO.addChild(tgWall2);
+						
+				translate.set(new Vector3f((PLAYGROUND_WIDTH/2) - 0.1f, 0f, 0f));
+				TransformGroup tgWall3 = new TransformGroup(translate);
+				tgWall3.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
+				tgWall3.setPickable(true);
+				tgWall3.addChild(wall3);
+				tgO.addChild(tgWall3);
+						
+				translate.set(new Vector3f(0.6f, -1f, 0f));
+				TransformGroup tgWall4 = new TransformGroup(translate);
+				tgWall4.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
+				tgWall4.setPickable(true);
+				tgWall4.addChild(wall4);
+				tgO.addChild(tgWall4);
+				
+				translate.set(new Vector3f(0.1f, -0.65f, 0f));
+				TransformGroup tgWall5 = new TransformGroup(translate);
+				tgWall5.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
+				tgWall5.setPickable(true);
+				tgWall5.addChild(wall5);
+				tgO.addChild(tgWall5);
+						
+				translate.set(new Vector3f(-0.1f, -0.35f, 0f));
+				TransformGroup tgWall6 = new TransformGroup(translate);
+				tgWall6.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
+				tgWall6.setPickable(true);
+				tgWall6.addChild(wall6);
+				tgO.addChild(tgWall6);
+
+				break;
+			case 2:
+				// Erzeuge und verschiebe 8 Saeulen fuer die Lampen fuer den Hindernis-Parcours
+				for (float[] pos : pillarPositions) {
+					createPillar(pillarPositions, tgO, pos[0], pos[1]);
+				}
+				break;
+			default:
+				// Welt 2 - weil es weniger Programmcode ist :-)
+				for (float[] pos : pillarPositions) {
+					createPillar(pillarPositions, tgO, pos[0], pos[1]);
+				}
+				break;
+		}
 
 		/*
 		 * ParcoursLoader pL = new ParcoursLoader();
@@ -800,6 +874,9 @@
 		return objRoot;
 	}
 
+	/**
+	 * Erzeuge und verschiebe Saeulen fuer den Hindernis-Parcours
+	 */
 	private void createPillar(float[][] pillarPositions, TransformGroup tgO,
 			float xpos, float ypos) {
 		Cylinder pillar = new Cylinder(0.05f, 0.5f, getObstacleAppear());
@@ -814,6 +891,9 @@
 		tgO.addChild(tg);
 	}
 
+	/**
+	 * Erzeuge und verschiebe Lampen (auf den Saeulen) fuer den Hindernis-Parcours
+	 */
 	private void createLight(BoundingSphere pointLightBounds,
 			Color3f pointLightColor, float xpos, float ypos, float zpos) {
 		PointLight pointLight = new PointLight();
