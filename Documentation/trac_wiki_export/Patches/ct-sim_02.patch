Index: CtBotSim.java
===================================================================
RCS file: /CVSROOT/ct-Sim/ctSim/ctSim/Model/CtBotSim.java,v
retrieving revision 1.3
diff -u -r1.3 CtBotSim.java
--- CtBotSim.java	15 Feb 2006 12:49:16 -0000	1.3
+++ CtBotSim.java	15 Feb 2006 12:57:00 -0000
@@ -205,6 +205,7 @@
 				isApperanceCollision = false;
 			}
 		} else {
+			moveDistance = 0; // Wird später noch für den Maussensor benötigt
 			if (isApperance) {
 				botBody.setAppearance(world.getWorldView().getBotAppearCollision());
 				isApperance = false;
@@ -318,21 +319,15 @@
 		// Maussensor aktualisieren
 		if (updateSensMouse) {
 			// DeltaY berechnen
-			// Differenz bilden
-			Vector3f vecY = new Vector3f(this.getPos());
-			vecY.sub(oldPos);
-			// die zurueckgelegte Strecke in Dots
-			int deltaY = meter2Dots(vecY.length());
+			int deltaY = meter2Dots(moveDistance);
 			this.setSensMouseDY(deltaY);
 			
 			// DeltaX berechnen
-			// Drehung um die eigene Achse berechenen
-			double angleDiff = SimUtils.getRotation(newHeading) - SimUtils.getRotation(oldHeading);
 			// Abstand des Maussensors von Zentrum berechnen
-			Vector3f vecMs = new Vector3f((float)SENS_MOUSE_ABSTAND_X, (float)SENS_MOUSE_ABSTAND_Y, 0f);
-			// Drehung(in rad) * Radius bestimmt die Laenge, die der Maussensor auf einem 
+			// Drehung(in rad) * SENS_MOUSE_ABSTAND_Y bestimmt die Laenge, die der Maussensor auf einem 
 			// imaginaeren Kreis um den Mittelpunkt des Bots abgelaufen ist.
-			int deltaX = meter2Dots(angleDiff * vecMs.length());
+			// !!Dies ist nur korrekt solange SENS_MOUSE_ABSTAND_X==0 gilt
+			int deltaX = meter2Dots(2*_gamma * SENS_MOUSE_ABSTAND_Y);
 			this.setSensMouseDX(deltaX);
 		}
 	}
