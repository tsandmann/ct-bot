[[PageOutline(1-999)]]

= Installationsanleitung für den c't-Bot und den c't-Sim =

Diese Anleitung gilt ab Version Release 23, für ältere Versionen bitte die [wiki:Installationsanleitung alte Anleitung] verwenden.

== I. Java und Eclipse installieren ==

1. Java
 * Linux: Aktuelles Java '''JDK''' am besten über die Paketverwaltung installieren
 * Mac / Windows: Aktuelles Java '''JDK''' [http://www.oracle.com/technetwork/java/javase/downloads/index.html herunterladen] und installieren. Getestete Version: 8u121
 * '''Hinweis''': Für Java 9 ist eine Eclipse Version ab 4.7.1a zwingend erforderlich.
1. Eclipse
 * Eclipse herunterladen und installieren, siehe [wiki:EclipseInstallation Anleitung zur Einrichtung von Eclipse]. Getestete Version: Eclipse Neon (4.6)

== II. Compiler für simulierte Bots (x86) installieren ==

 * Linux: gcc über die Paketverwaltung installieren
 * Mac: [https://itunes.apple.com/de/app/xcode/id497799835?mt=12 Xcode] installieren, im Terminal {{{xcode-select --install}}} ausführen um die Command Line Tools zu installieren.
 * Windows
  1. msys2 installieren (siehe auch [http://msys2.github.io msys2 Installationsanleitung])
   1. Installer [http://msys2.github.io hier] herunterladen (''msys2-x86_64-''XYZ''.exe'') und ausführen
   1. Als Installationsordner {{{C:\msys64}}} verwenden (wie gehen hier von der 64-Bit Version aus)
  1. gcc von msys2 installieren
   1. ''MinGW-w64 Win64 Shell'' starten
   1. {{{pacman -Suy}}} ausführen, um msys2 zu aktualisieren
   1. {{{pacman -S mingw-w64-x86_64-gcc make}}} ausführen, um Compiler zu installieren
  1. Windows PATH-Eintrag in der Systemsteuerung [http://techmixx.de/windows-10-umgebungsvariablen-bearbeiten/ erweitern] um {{{C:\msys64\mingw64\bin}}} (sonst werden beim Start von ct-Bot.exe die nötigen Libraries nicht gefunden)
  1. PATH-Einträge in Eclipse erweitern um {{{C:\msys64\usr\bin;C:\msys64\mingw64\bin}}}
   1. In Eclipse {{{Window->Preferences->C/C++->Build->Environment}}} öffnen
   1. {{{Select...}}} -> {{{Path}}} -> {{{Edit...}}}
   1. Am '''Anfang''' hinzufügen: {{{C:\msys64\usr\bin;C:\msys64\mingw64\bin;}}}

== III. Compiler für reale Bots (ATmega) installieren ==

 * Linux: '''AVR Toolchain for Linux''' [http://www.atmel.com/tools/ATMELAVRTOOLCHAINFORLINUX.aspx herunterladen] ('''8-bit''' Version) und entpacken, z.B. nach {{{/usr/local/}}}. Getestete Version: 3.5.4
 * Mac: '''AVR Toolchain for Mac OS X''' [http://distribute.atmel.no/tools/opensource/Atmel-AVR-GNU-Toolchain/3.5.4/ herunterladen] (derzeit ''avr8-gnu-toolchain-osx-3.5.4.468-darwin.any.x86_64.tar.gz'') und entpacken nach {{{/usr/local/}}}. Getestete Version: 3.5.4
 * Windows: '''AVR Toolchain for Windows''' [http://www.atmel.com/tools/ATMELAVRTOOLCHAINFORWINDOWS.aspx herunterladen] und installieren. Das Installationsprogramm sollte man dabei explizit als Administrator ausführen (via Kontextmenü), sonst schlägt der Installer einen komischen Installationsort vor anstatt höhere Rechte anzufordern. Getestete Version: 3.5.4

 1. Den Pfad zum avr-gcc (Unterverzeichnis {{{bin}}}) anschließend ebenfalls in Eclipse zum '''PATH''' hinzufügen:
   1. PATH-Einträge erweitern um {{{C:\Program Files (x86)\avr8-gnu-toolchain\bin}}} (Windows) bzw. {{{/usr/local/avr8-gnu-toolchain-linux_x86/bin}}} (Linux) oder {{{/usr/local/avr8-gnu-toolchain-darwin_x86_64/bin}}} (Mac) in Eclipse
   1. In Eclipse {{{Window->Preferences->C/C++->Build->Environment}}} öffnen
   1. {{{Select...}}} -> {{{Path}}} -> {{{Edit...}}}
   1. Am '''Ende''' hinzufügen: {{{;C:\Program Files (x86)\avr8-gnu-toolchain\bin}}} (Windows) bzw. {{{:/usr/local/avr8-gnu-toolchain-linux_x86/bin}}} (Linux) oder {{{:/usr/local/avr8-gnu-toolchain-darwin_x86_64/bin}}} (Mac)

== IV. Code für Bot und Sim importieren ==

Der Code steht im SVN-Repository zur Verfügung.

Alternativ steht auch jeweils ein GIT-Repository auf Github zur Verfügung für ct-Bot und ct-Sim. Diese werden intern für die Entwicklung benutzt, der Stand des Branches ''master'' ist synchron zum Branch ''[wiki:SVNUndEclipse#AufbaudesRepositories stable]'' im SVN. Der Vorteil der Verwendung der GIT-Repositories ist, dass Eclipse GIT von Haus aus unterstützt und daher kein Plugin für SVN installiert werden muss. Außerdem kann man leicht eigene Forks für eigenen Anpassungen oder Erweiterungen erstellen.

  * SVN: Siehe [wiki:SVNUndEclipse Import des Codes aus dem SVN-Repository]
oder alternativ:
  * GIT: Siehe [wiki:GITUndEclipse Import des Codes von Github]

== V. Installation Testen / weitere Schritte  ==

=== Hinweise ===

  1. Evtl. bekommt man in Eclipse Warnings ähnlich der Folgenden angezeigt:[[BR]]
      {{{Program "arm-linux-gnueabihf-g++" not found in PATH}}} [[BR]]
    Diese kann man ignorieren, wenn man das zugehörige Target nicht braucht (z.B. Build für Raspberry Pi im Falle von arm-linux-gnueabihf). Um die Warnings zu entfernen kann man die nicht benötigten Configurations in den Projekteinstellungen unter ''C/C++ Build'' -> ''Manage Configurations...'' löschen.

=== c't-Sim inkl. virtueller Bots starten ===

  1. c't-Sim starten. Hierzu gibt es zwei gleichwertige Möglichkeiten:
  * In Eclipse klickt man die Datei	ctSim/controller/Main.java rechts an und wählt "Run !As/Application". (Tipp: Nach dem ersten "Run" startet Strg-F11 die zuletzt ausgeführte Datei.)
  * Von der Kommandozeile aus wechselt man in das Verzeichnis, in dem Eclipse das ctSim-Projekt aufhebt (ein Unterverzeichnis des Eclipse-Workspace, den man bei der Eclipse-Installation angegeben hat). Dort: {{{java ctSim.controller.Main}}}
 1. Falls nicht schon geschehen, c't-Bot compilieren ''(ct-Bot-Projekt markieren und "!Project/Clean" wählen)''
 1. c't-Bot starten:
  * In Eclipse: Im ct-Bot-Projekt die Datei Debug-Linux_Mac/ct-Bot (Linux und Mac) bzw. Debug-W32\ct-Bot.exe doppelt anklicken
  * Auf der Kommandozeile: Wechsel in das Verzeichnis, in dem Eclipse das ct-Bot-Projekt aufhebt, und die genannte Datei ausführen

Hinweis: Die Datei ct-Bot.exe bzw. ct-Bot beendet sich zügig wieder, wenn sie keinen Simulator findet, der auf ihren Versuch einer TCP/IP-Verbindung antwortet. Daher ist die Reihenfolge "zuerst Sim, dann Bot" wichtig.

== VI. Compiler für Raspberry Pi installieren (optional) ==

=== Für Raspberry Pi 2 ===
 * Linux (x86_64):
  1. Toolchain verfügbar auf [https://github.com/tsandmann/arm-toolchain-linux Github]
  1. {{{sudo git clone --depth=1 https://github.com/tsandmann/arm-toolchain-linux.git /usr/local/arm-unknown-linux-gnueabihf}}}
 * Mac (x86_64):
  1. Toolchain verfügbar auf [https://github.com/tsandmann/arm-toolchain-mac Github]
  1. {{{sudo git clone --depth=1 https://github.com/tsandmann/arm-toolchain-mac.git /usr/local/arm-unknown-linux-gnueabihf}}}
 * Windows:
  1. Linaro Toolchain {{{gcc-linaro-7.1.1-2017.05-i686-mingw32_arm-linux-gnueabihf.tar.xz }}} herunterladen von [https://releases.linaro.org/components/toolchain/binaries/7.1-2017.05/arm-linux-gnueabihf/]: [https://releases.linaro.org/components/toolchain/binaries/7.1-2017.05/arm-linux-gnueabihf/gcc-linaro-7.1.1-2017.05-i686-mingw32_arm-linux-gnueabihf.tar.xz direktlink]
  1. Entpacken nach {{{C:\Program Files (x86)\arm-linux-gnueabihf}}}
 * Den Pfad zum arm-gcc (Unterverzeichnis {{{bin}}}) anschließend ebenfalls in Eclipse zum '''PATH''' hinzufügen:
   1. PATH-Einträge erweitern um {{{C:\Program Files (x86)\arm-linux-gnueabihf\bin}}} (Windows) bzw. {{{/usr/local/arm-unknown-linux-gnueabihf/bin}}} (Linux / Mac) in Eclipse
   1. In Eclipse {{{Window->Preferences->C/C++->Build->Environment}}} öffnen
   1. {{{Select...}}} -> {{{Path}}} -> {{{Edit...}}}
   1. Am Ende hinzufügen: {{{;C:\Program Files (x86)\arm-linux-gnueabihf\bin}}} (Windows) bzw. {{{:/usr/local/arm-unknown-linux-gnueabihf/bin}}} (Linux / Mac)

=== Für Raspberry Pi 3 ===
 * Linux (x86_64):
  1. Toolchain verfügbar auf [https://github.com/tsandmann/armv8l-toolchain-linux Github]
  1. {{{sudo git clone --depth=1 https://github.com/tsandmann/armv8l-toolchain-linux.git /usr/local/armv8l-unknown-linux-gnueabihf}}}
 * Mac (x86_64):
  1. Toolchain verfügbar auf [https://github.com/tsandmann/armv8l-toolchain-mac Github]
  1. {{{sudo git clone --depth=1 https://github.com/tsandmann/armv8l-toolchain-mac.git /usr/local/armv8l-unknown-linux-gnueabihf}}}
 * Windows:
  1. Linaro Toolchain {{{gcc-linaro-7.1.1-2017.05-i686-mingw32_armv8l-linux-gnueabihf.tar.xz}}} herunterladen von [https://releases.linaro.org/components/toolchain/binaries/7.1-2017.05/armv8l-linux-gnueabihf/]: [https://releases.linaro.org/components/toolchain/binaries/7.1-2017.05/armv8l-linux-gnueabihf/gcc-linaro-7.1.1-2017.05-i686-mingw32_armv8l-linux-gnueabihf.tar.xz direktlink]
  1. Entpacken nach {{{C:\Program Files (x86)\armv8l-unknown-linux-gnueabihf}}}
 * Den Pfad zum arm-gcc (Unterverzeichnis {{{bin}}}) anschließend ebenfalls in Eclipse zum '''PATH''' hinzufügen:
   1. PATH-Einträge erweitern um {{{C:\Program Files (x86)\armv8l-unknown-linux-gnueabihf\bin}}} (Windows) bzw. {{{/usr/local/armv8l-unknown-linux-gnueabihf/bin}}} (Linux / Mac) in Eclipse
   1. In Eclipse {{{Window->Preferences->C/C++->Build->Environment}}} öffnen
   1. {{{Select...}}} -> {{{Path}}} -> {{{Edit...}}}
   1. Am Ende hinzufügen: {{{;C:\Program Files (x86)\armv8l-unknown-linux-gnueabihf\bin}}} (Windows) bzw. {{{:/usr/local/armv8l-unknown-linux-gnueabihf/bin}}} (Linux / Mac)
